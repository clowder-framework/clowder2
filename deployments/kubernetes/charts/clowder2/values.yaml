hostname: clowder2.localhost

auth:
  realm: clowder
  clientID: clowder2-backend

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# ----------------------------------------------------------------------
# FRONTEND
# ----------------------------------------------------------------------
frontend:
  image:
    repository: clowder/clowder2-frontend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# BACKEND
# ----------------------------------------------------------------------
backend:
  image:
    repository: clowder/clowder2-backend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# GEOSERVER
# ----------------------------------------------------------------------
geoserver:
  enabled : true
  username: admin
  password: admin
  workspace: clowder2
  url: http://clowder2-geoserver:8080/geoserver/
  replicas: 1
  image:
    repository: kartoza/geoserver
    tag: 2.17.2
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  persistence:
    storageClass: nfs-taiga
    size: 8Gi

# ----------------------------------------------------------------------
# MINIO
# ----------------------------------------------------------------------
minio:
  enabled: true

  # login to minio
  auth:
    rootUser: minioadmin
    rootPassword: minioadmin

  # enable webui
  disableWebUI: false

  containerPorts:
    api: 9000
    console: 9001

  # enable ingress for webui
  ingress:
    enabled: true
    hostname: minio.clowder2.localhost

  # enable ingress for api
  apiIngress:
    enabled: true
    hostname: minio-api.clowder2.localhost

  # enabled distributed mode (or standalone)
#  mode: distributed
  mode: standalone

  # if you pick distributed, this needs to be >= 4
  statefulset:
#    replicaCount: 4
    replicaCount: 1

  # persistence
  persistence:
    # storage size for the data
    size: 20Gi

    # where to store data, can be network storage
    storageClass: nfs-taiga

  service:
    type: ClusterIP

# ----------------------------------------------------------------------
# MONGODB
# ----------------------------------------------------------------------
mongodb:
  # either mongodb is installed as part of this chart, or you need to
  # specify the mongodb uri
  enabled: true
  #uri: mongobd://server:27017/database
  database: clowder2

  # right now no password
  auth:
    enabled: false

  # storage
  persistence:
    # storage size for database
    size: 8Gi

    # pick fast non network storage
    storageClass: csi-cinder-sc-retain

# ----------------------------------------------------------------------
# RABBITMQ
# ----------------------------------------------------------------------
rabbitmq:
  # either rabbitmq is installed as part of this chart, or you need to
  # specify the rabbitmq uri. If neither is specified rabbitmq will not
  # be used by clowder.
  enabled: true
  #uri: amqp://username:password@server/database

  # login
  auth:
    username: guest
    password: guest
    erlangCookie: kittencookie

  # enable webfrontend
  ingress:
    enabled: true
    hostname: rabbitmq.clowder2.localhost

  persistence:
    # pick fast storage
    storageClass: csi-cinder-sc-retain

# ----------------------------------------------------------------------
# DEFAULT EXTRACTOR SERVICES
# ----------------------------------------------------------------------
message:
  image:
    repository: clowder/clowder2-messages
#    tag: main
    pullPolicy: Always

heartbeat:
  image:
    repository: clowder/clowder2-heartbeat
#    tag: main
    pullPolicy: Always


# ----------------------------------------------------------------------
# EXTRACTORS
# ----------------------------------------------------------------------
## list of extractors to be installed. Each extractor should have the
## following fields:
## enabled      : true/false - should the extractor be installed
## image        : dokeer/image:tag - the extractor docker image
## replicaCount : number - the number of this extractor to install
## env          : additional environment variables to pass to extractor.
extractors:
  wordcount:
    image: clowder/extractors-wordcount:latest
  image-preview:
    image: clowder/extractors-image-preview:latest
  image-metadata:
    image: clowder/extractors-image-metadata:latest
  audio-preview:
    image: clowder/extractors-audio-preview:latest
  file-digest:
    image: clowder/extractors-digest:latest
  geotiff-preview:
    image: clowder/extractors-geotiff-preview:latest

# ----------------------------------------------------------------------
# ELASTICSEARCH
# ----------------------------------------------------------------------
elasticsearch:
  clusterName: clowder2

  master:
    persistence:
       storageClass: csi-cinder-sc-retain
       size: 8Gi
  data:
    persistence:
       storageClass: csi-cinder-sc-retain
       size: 8Gi

# ----------------------------------------------------------------------
# KEYCLOAK
# ----------------------------------------------------------------------
keycloak:
  httpRelativePath: /keycloak/

  auth:
    adminUser: admin
    adminPassword: admin

  ingress:
    enabled: true
    hostname: clowder2.localhost
    path: /keycloak

  service:
    type: ClusterIP

  postgresql:
    auth:
      username: keycloak
      password: password
      postgresPassword: password
      database: keycloak

    primary:
      persistence:
         storageClass: csi-cinder-sc-retain
         size: 8Gi

  # Mount configmap with theme and untar
  initContainers:
    - name: init-customtheme
      image: busybox:1.28
      command: ['sh', '-c', 'cd /keycloak && tar zxf /theme/custom_theme.tgz']
      volumeMounts:
      - mountPath: /keycloak
        name: keycloak-theme
      - mountPath: /theme
        name: clowder2-theme

  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: "-Dkeycloak.import=/config/realm.json"

  extraVolumeMounts:
    - name: keycloak-theme
      mountPath: /opt/bitnami/keycloak/themes
    - name: clowder2-realm
      mountPath: /config
      readOnly: true

  extraVolumes:
    - name: keycloak-theme
      emptyDir: {}
    - name: clowder2-theme
      configMap:
        name: clowder2-theme
    - name: clowder2-realm
      configMap:
        name: clowder2-realm

# ----------------------------------------------------------------------
# OTHERS
# ----------------------------------------------------------------------

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
